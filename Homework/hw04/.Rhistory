version_names <- function(str) {
string <- str_split(str, '_')
return(string[1][1])
}
sapply(tbl$NULL.Name, version_names)
string <- str_split_fixed(str, '_', n=2)
version_names <- function(str) {
string <- str_split_fixed(str, '_', n=2)
return(string[1])
}
string <- str_split_fixed(str, '_', n=2)
sapply(tbl$NULL.Name, version_names)
version_numbers <- function(str) {
string <- str_split_fixed(str, '_', n=2)
return(string[2])
}
sapply(tbl$NULL.Name, version_numbers)
version_numbers <- function(str) {
string <- str_split_fixed(str, '_', n=2)
str_replace(string[2], ".tar.gz", '')
return(string[2])
}
sapply(tbl$NULL.Name, version_numbers)
version_numbers <- function(str) {
string <- str_split_fixed(str, '_', n=2)
newStr <- str_replace(string[2], ".tar.gz", '')
return(newStr)
}
sapply(tbl$NULL.Name, version_numbers)
?Date
as.Date(tbl$NULL.Last.modified)
version_dates <- function(str) {
string <- str_split_fixed(str, " ", n=2)
return(as.Date(string[1]))
}
sapply(tbl$NULL.Last.modified, version_dates)
sapply(tbl$NULL.Last.modified, version_dates)
as.Date("1999-01-01")
#' @title version_dates
#' @description extracts the date of the version
#' @param str, string
#' @return string
version_dates <- function(str) {
string <- str_split_fixed(str, " ", n=2)
return(string[1])
}
sapply(tbl$NULL.Last.modified, version_dates)
version_dates <- function(str) {
string <- str_split_fixed(str, " ", n=2)
newStr <- string[1]
date <- as.Date(newStr)
return(date)
}
sapply(tbl$NULL.Last.modified, version_dates)
as.Date("2009-11-09")
tbl <-  tbl[3:n, ]
sapply(tbl$NULL.Last.modified, version_dates)
tbl
n <- n-1
tbl <-  tbl[3:n, ]
sapply(tbl$NULL.Last.modified, version_dates)
tbl$NULL.Last.modified
tbl <- read_archive('stringr')
n <- dim(tbl)[1] - 1
tbl <-  tbl[3:n, ]
sapply(tbl$NULL.Last.modified, version_dates)
tbl$NULL.Last.modified
View(tbl)
clean_archive <- function(df) {
n <- dim(df)[1] -1
df <- df[3:n, ]
name <- sapply(df$NULL.Name, version_names)
version <- sapply(df$NULL.Name, version_numbers)
date <- sapply(df$NULL.Last.modified, version_dates)
size <- sapply(df$NULL.Size, version_sizes)
return(data.frame(name, version, date, size))
}
read_archive <- function(str = '') {
url <- paste0('https://cran.r-project.org/src/contrib/Archive/', str)
tbl_html <- readHTMLTable(url)
return(data.frame(tbl_html[1]))
}
clean_archive <- function(df) {
n <- dim(df)[1] -1
df <- df[3:n, ]
name <- sapply(df$NULL.Name, version_names)
version <- sapply(df$NULL.Name, version_numbers)
date <- sapply(df$NULL.Last.modified, version_dates)
size <- sapply(df$NULL.Size, version_sizes)
return(data.frame(name, version, date, size))
}
version_names <- function(str) {
string <- str_split_fixed(str, '_', n=2)
return(string[1])
}
version_numbers <- function(str) {
string <- str_split_fixed(str, '_', n=2)
newStr <- str_replace(string[2], ".tar.gz", '')
return(newStr)
}
version_dates <- function(str) {
string <- str_split_fixed(str, " ", n=2)
newStr <- string[1]
date <- as.Date(newStr)
return(date)
}
version_sizes <- function(str){
num <- str_sub(str, 0, -2)
type <- str_sub(str, -1)
if(type == "K"){
return(as.numeric(num))
}
else{
return(1000*as.numeric(num))
}
}
tbl <- read_archive("stringr")
read_archive <- function(str = '') {
url <- paste0('http://cran.r-project.org/src/contrib/Archive/', str)
tbl_html <- readHTMLTable(url)
return(data.frame(tbl_html[1]))
}
tbl <- read_archive("stringr")
newT <- clean_archive(tbl)
View(newT)
?Date
date <- as.Date(newStr, format = "%Y-%m-%d")
version_dates <- function(str) {
string <- str_split_fixed(str, " ", n=2)
newStr <- string[1]
date <- as.Date(newStr, format = "%Y-%m-%d")
return(date)
}
newT <- clean_archive(tbl)
View(newT)
typeof(newT$name)
typeof(newT$date)
version_dates <- function(str) {
string <- str_split_fixed(str, " ", n=2)
newStr <- string[1]
date <- as.Date(newStr)
format(date, '%Y-%m-%d')
return(date)
}
newT <- clean_archive(tbl)
View(newT)
tbl$NULL.Last.modified
tbl$NULL.Last.modified[3]
str <- str_split_fixed(tbl$NULL.Last.modified[3], " ", n=2)
str
str[1]
as.Date(str[1])
as.Date(14557)
as.Date("14557")
class(newT$date)
as.Date(0)
as.Date(0, origin = "1970-01-01")
as.Date(14557, origin = "1970-01-01")
clean_archive <- function(df) {
n <- dim(df)[1] -1
df <- df[3:n, ]
name <- sapply(df$NULL.Name, version_names)
version <- sapply(df$NULL.Name, version_numbers)
date <- sapply(df$NULL.Last.modified, version_dates)
size <- sapply(df$NULL.Size, version_sizes)
return(data.frame(name, version, as.Date(date, origin = "1970-01-01"), size))
}
newT <- clean_archive(tbl)
View(newT)
clean_archive <- function(df) {
n <- dim(df)[1] -1
df <- df[3:n, ]
name <- sapply(df$NULL.Name, version_names)
version <- sapply(df$NULL.Name, version_numbers)
date <- as.Date(sapply(df$NULL.Last.modified, version_dates), origin = "1970-01-01")
size <- sapply(df$NULL.Size, version_sizes)
return(data.frame(name, version, date, size))
}
newT <- clean_archive(tbl)
View(newT)
library(ggplot2)
plot_archive <- function(df){
title <- paste0(df$name[1], ": timeline of version sizes")
ggplot(df, aes(x = df$date, y = df$size)) + geom_step()
}
plot_archive(newT)
plot_archive <- function(df){
title <- paste0(df$name[1], ": timeline of version sizes")
ggplot(df, aes(x = df$date, y = df$size))
+ geom_step()
+ labs(title = title, y = 'Size (kilobytes)', x = 'Date')
}
plot_archive(newT)
plot_archive <- function(df){
title <- paste0(df$name[1], ": timeline of version sizes")
ggplot(df, aes(x = df$date, y = df$size)) +
geom_step() +
labs(title = title, y = 'Size (kilobytes)', x = 'Date')
}
plot_archive(newT)
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
source("../code/archive-functions.R")
library(stringr)
library(XML)
source("../code/archive-functions.R")
library(stringr)
library(XML)
source("../code/archive-functions.R")
source("../code/archive-functions.R")
source("../code/archive-functions.R")
source("../code/archive-functions.R")
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
plot_archive(clean_data)
source("../code/archive-functions.R")
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
plot_archive(clean_data)
archives <- c("ggplot2", "XML", "knitr", "dplyr")
rDatas <- sapply(archives, read_archive)
cDatas <- sapply(rDatas, clean_archive)
archives <- c("ggplot2", "XML", "knitr")
rDatas <- sapply(archives, read_archive)
cDatas <- sapply(rDatas, clean_archive)
rd_ggplot <- read_archive('ggplot2')
cd_ggplot <- clean_archive(rd_ggplot)
rd_ggplot <- read_archive('ggplot2')
cd_ggplot <- clean_archive(rd_ggplot)
plot_archive(cd_ggplot)
rd_xml <- read_archive('XML')
cd_xml <- clean_archive(rd_xml)
plot_archive(cd_xml)
rd_knitr <- read_archive('knitr')
cd_knitr <- clean_archive(rd_knitr)
plot_archive(cd_knitr)
rd_dplyr <- read_archive('dplyr')
cd_dplyr <- clean_archive(rd_dplyr)
plot_archive(cd_dplyr)
vals <- c('ggplot2', 'XML', 'knitr', 'dplyr')
rd_vals <- sapply(vals, raw_data)
vals <- c('ggplot2', 'XML', 'knitr', 'dplyr')
rd_vals <- sapply(vals, read_archive)
vals <- c('ggplot2', 'XML', 'knitr', 'dplyr')
rd_vals <- sapply(vals, read_archive)
cd_vals <- sapply(rd_vals, clean_archive)
vals <- c('ggplot2', 'XML', 'knitr', 'dplyr')
rd_vals <- lapply(vals, read_archive)
cd_vals <- lapply(rd_vals, clean_archive)
source("../code/archive-functions.R")
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
plot_archive(clean_data)
vals <- c('ggplot2', 'XML', 'knitr', 'dplyr')
rd_vals <- lapply(vals, read_archive)
cd_vals <- lapply(rd_vals, clean_archive)
View(cd_vals)
View(cd_vals)
View(cd_vals[[1]])
newD <- rbind(cd_vals)
View(newD)
newD <- rbind(cd_vals[1:4])
View(newD)
newD <- rbind(cd_vals[1], cd_vals[2], cd_vals[3], cd_vals[4])
View(newD)
newD <- rbind(cd_vals[1][1], cd_vals[2][1], cd_vals[3][1], cd_vals[4][1])
View(newD)
cd_vals[1]
cd_vals[1][1]
vals <- c('ggplot2', 'XML', 'knitr', 'dplyr')
rd_vals <- sapply(vals, read_archive)
cd_vals <- lapply(rd_vals, clean_archive)
View(rd_vals)
rd_ggplot <- read_archive('ggplot2')
cd_ggplot <- clean_archive(rd_ggplot)
rd_xml <- read_archive('XML')
cd_xml <- clean_archive(rd_xml)
rd_knitr <- read_archive('knitr')
cd_knitr <- clean_archive(rd_knitr)
rd_dplyr <- read_archive('dplyr')
cd_dplyr <- clean_archive(rd_dplyr)
newD <- rbind(cd_dplyr, cd_ggplot, cd_knitr, cd_xml)
View(newD)
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
source("../code/archive-functions.R")
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
plot_archive(clean_data)
rd_ggplot <- read_archive('ggplot2')
cd_ggplot <- clean_archive(rd_ggplot)
rd_xml <- read_archive('XML')
cd_xml <- clean_archive(rd_xml)
rd_knitr <- read_archive('knitr')
cd_knitr <- clean_archive(rd_knitr)
rd_dplyr <- read_archive('dplyr')
cd_dplyr <- clean_archive(rd_dplyr)
newD <- rbind(cd_dplyr, cd_ggplot, cd_knitr, cd_xml)
rd_ggplot <- read_archive('ggplot2')
cd_ggplot <- clean_archive(rd_ggplot)
write.csv(cd_ggplot, "../data/ggplot2-archive.csv")
rd_xml <- read_archive('XML')
cd_xml <- clean_archive(rd_xml)
write.csv(cd_xml, "../data/xml-archive.csv")
rd_knitr <- read_archive('knitr')
cd_knitr <- clean_archive(rd_knitr)
write.csv(cd_knitr, "../data/knitr-archive.csv")
rd_dplyr <- read_archive('dplyr')
cd_dplyr <- clean_archive(rd_dplyr)
write.csv(cd_dplyr, "../data/dplyr-archive.csv")
newD <- rbind(cd_dplyr, cd_ggplot, cd_knitr, cd_xml)
ggplot(newD, aes(x = newD$date, y = newD$size, color = newD$name)) +
labs(y = 'Size (kilobytes)', x = 'Date') +
geom_step
newD <- rbind(cd_dplyr, cd_ggplot, cd_knitr, cd_xml)
ggplot(newD, aes(x = newD$date, y = newD$size, color = newD$name)) +
labs(y = 'Size (kilobytes)', x = 'Date') +
geom_step()
newD <- rbind(cd_dplyr, cd_ggplot, cd_knitr, cd_xml)
ggplot(newD, aes(x = newD$date, y = newD$size, color = name)) +
labs(y = 'Size (kilobytes)', x = 'Date') +
geom_step()
newD <- rbind(cd_dplyr, cd_ggplot, cd_knitr, cd_xml)
ggplot(newD, aes(x = date, y = size, color = name)) +
labs(y = 'Size (kilobytes)', x = 'Date') +
geom_step()
newD <- rbind(cd_dplyr, cd_ggplot, cd_knitr, cd_xml)
ggplot(newD, aes(x = date, y = size, color = name)) +
labs(y = 'Size (kilobytes)', x = 'Date') +
geom_step()
ggplot(newD, aes(x = date, y = size, color = name)) +
geom_step() +
labs(y = 'Size (kilobytes)', x = 'Date') +
facet_wrap(~ type, scales = 'free')
newD <- rbind(cd_dplyr, cd_ggplot, cd_knitr, cd_xml)
ggplot(newD, aes(x = date, y = size, color = name)) +
labs(y = 'Size (kilobytes)', x = 'Date') +
geom_step()
ggplot(newD, aes(x = date, y = size, color = name)) +
geom_step() +
labs(y = 'Size (kilobytes)', x = 'Date') +
facet_wrap(~ name, scales = 'free')
content = read.csv("../data/text-emotion.csv", stringsAsFactors = F)$content
content = read.csv("../data/text-emotion.csv", stringsAsFactors = F)$content
counts = nchar(content)
print(summary(counts))
hist(counts, breaks = seq(0, max(counts)+5, by=5))
mentions = 1:length(content)
for (i in mentions) {
mentions[i] = sum(grepl("^@[A-Za-z0-9_]{1,15}", str_split(content[i], " ")[[1]]))
}
mentions = unlist(mentions)
menCounts = table(mentions)
barplot(menCounts)
menCounts
content[mentions == 10]
mts = 1:length(content)
for (i in mts) {
mts[i] = sum(grepl("^@[A-Za-z0-9_]{1,15}", str_split(content[i], " ")[[1]]))
}
mts = unlist(mts)
mCounts = table(mts)
barplot(mCounts)
mCounts
content[mts == 10]
hashtags = 1:length(content)
hLengths = rep(0,max(counts))
for(i in hashtags) {
# split up the tweet into words
tWords = str_split(content[i], " ")[[1]]
# mark which words are hashtags
whichTags = grepl("^#[A-Za-z][A-Za-z0-9]*", tWords)
# count how many hashtags there are
hashtags[i] = sum(whichTags)
# create a table of frequncies for hashtag lengths
for (j in 1:length(whichTags)) {
if (whichTags[j]) {
index <- nchar(tWords[j])
hLengths[index] = hLengths[index] + 1
}
}
}
names(hashtagLengths) <- 1:length(hashtagLengths)
hashtagLengths <- hashtagLengths[hashtagLengths > 0]
# open up the hashtags list
hashtags = unlist(hashtags)
# get the frequencies of the number of hashtags in a tweet
hashCounts = table(hashtags)
#frequencies of counts
hashCounts
barplot(hashCounts)
#avg length of hashtags
sum(hashtagLengths*as.numeric(names(hashtagLengths))/sum(hashtagLengths))
#mode of the length
names(hashtagLengths[hashtagLengths == max(hashtagLengths)])
hashtags = 1:length(content)
hLengths = rep(0,max(counts))
for(i in hashtags) {
# split up the tweet into words
tWords = str_split(content[i], " ")[[1]]
# mark which words are hashtags
whichTags = grepl("^#[A-Za-z][A-Za-z0-9]*", tWords)
# count how many hashtags there are
hashtags[i] = sum(whichTags)
# create a table of frequncies for hashtag lengths
for (j in 1:length(whichTags)) {
if (whichTags[j]) {
index <- nchar(tWords[j])
hLengths[index] = hLengths[index] + 1
}
}
}
names(hLengths) <- 1:length(hLengths)
hLengths <- hLengths[hashtagLengths > 0]
# open up the hashtags list
hashtags = unlist(hashtags)
# get the frequencies of the number of hashtags in a tweet
hashCounts = table(hashtags)
#frequencies of counts
hashCounts
barplot(hashCounts)
#avg length of hashtags
sum(hLengths*as.numeric(names(hLengths))/sum(hLengths))
#mode of the length
names(hLengths[hLengths == max(hLengths)])
hashtags = 1:length(content)
hLengths = rep(0,max(counts))
for(i in hashtags) {
tWords = str_split(content[i], " ")[[1]]
whichTags = grepl("^#[A-Za-z][A-Za-z0-9]*", tWords)
hashtags[i] = sum(whichTags)
for (j in 1:length(whichTags)) {
if (whichTags[j]) {
index <- nchar(tWords[j])
hLengths[index] = hLengths[index] + 1
}
}
}
names(hLengths) <- 1:length(hLengths)
hLengths <- hLengths[hLengths > 0]
hashtags = unlist(hashtags)
hashCounts = table(hashtags)
hashCounts
barplot(hashCounts)
sum(hLengths*as.numeric(names(hLengths))/sum(hLengths))
names(hLengths[hLengths == max(hLengths)])
mts = 1:length(content)
for (i in mts) {
mts[i] = sum(grepl("^@[A-Za-z0-9_]{1,15}", str_split(content[i], " ")[[1]]))
}
mts = unlist(mts)
mCounts = table(mts)
barplot(mCounts)
mCounts
content[mts == 10]
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = '../images/')
source("../code/archive-functions.R")
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
plot_archive(clean_data)
rd_ggplot <- read_archive('ggplot2')
cd_ggplot <- clean_archive(rd_ggplot)
write.csv(cd_ggplot, "../data/ggplot2-archive.csv")
rd_xml <- read_archive('XML')
cd_xml <- clean_archive(rd_xml)
write.csv(cd_xml, "../data/xml-archive.csv")
rd_knitr <- read_archive('knitr')
cd_knitr <- clean_archive(rd_knitr)
write.csv(cd_knitr, "../data/knitr-archive.csv")
rd_dplyr <- read_archive('dplyr')
cd_dplyr <- clean_archive(rd_dplyr)
write.csv(cd_dplyr, "../data/dplyr-archive.csv")
newD <- rbind(cd_dplyr, cd_ggplot, cd_knitr, cd_xml)
ggplot(newD, aes(x = date, y = size, color = name)) +
labs(y = 'Size (kilobytes)', x = 'Date') +
geom_step()
ggplot(newD, aes(x = date, y = size, color = name)) +
geom_step() +
labs(y = 'Size (kilobytes)', x = 'Date') +
facet_wrap(~ name, scales = 'free')
content = read.csv("../data/text-emotion.csv", stringsAsFactors = F)$content
counts = nchar(content)
print(summary(counts))
hist(counts, breaks = seq(0, max(counts)+5, by=5))
mts = 1:length(content)
for (i in mts) {
mts[i] = sum(grepl("^@[A-Za-z0-9_]{1,15}", str_split(content[i], " ")[[1]]))
}
mts = unlist(mts)
mCounts = table(mts)
barplot(mCounts)
mCounts
content[mts == 10]
hashtags = 1:length(content)
hLengths = rep(0,max(counts))
for(i in hashtags) {
tWords = str_split(content[i], " ")[[1]]
whichTags = grepl("^#[A-Za-z][A-Za-z0-9]*", tWords)
hashtags[i] = sum(whichTags)
for (j in 1:length(whichTags)) {
if (whichTags[j]) {
index <- nchar(tWords[j])
hLengths[index] = hLengths[index] + 1
}
}
}
names(hLengths) <- 1:length(hLengths)
hLengths <- hLengths[hLengths > 0]
hashtags = unlist(hashtags)
hashCounts = table(hashtags)
hashCounts
barplot(hashCounts)
sum(hLengths*as.numeric(names(hLengths))/sum(hLengths))
names(hLengths[hLengths == max(hLengths)])
